# Generated by Django 2.2.7 on 2019-12-16 18:52

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='user email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur (Authentification)',
                'verbose_name_plural': 'Utilisateurs (Authentification)',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié ?')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='image de profil')),
                ('contact1', models.CharField(max_length=255, verbose_name='contact 1')),
                ('contact2', models.CharField(blank=True, max_length=255, null=True, verbose_name='contact 2')),
            ],
            options={
                'verbose_name': 'compte',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, verbose_name='adresse')),
            ],
            options={
                'verbose_name': 'adresse',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name="nom de l'article")),
                ('price', models.PositiveIntegerField(default=0, verbose_name="prix de l'article")),
                ('description', models.TextField(blank=True, verbose_name="description de l'article")),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='stock restant')),
                ('image1', models.ImageField(upload_to='', verbose_name="changer l'image")),
                ('image2', models.ImageField(blank=True, upload_to='', verbose_name="changer l'image")),
                ('image3', models.ImageField(blank=True, upload_to='', verbose_name="changer l'image")),
                ('image4', models.ImageField(blank=True, upload_to='', verbose_name="changer l'image")),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name="Lien de l'article")),
                ('reduction', models.PositiveIntegerField(default=0, verbose_name='réduction (en %)')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Date de création')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, default=datetime.datetime.now, verbose_name='créé le')),
                ('ref', models.CharField(blank=True, max_length=255, unique=True, verbose_name='référence')),
            ],
            options={
                'verbose_name': 'panier',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='nom')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='Lien de la catégorie')),
                ('image', models.ImageField(blank=True, upload_to='', verbose_name='Image de la catégorie')),
            ],
            options={
                'verbose_name': 'catégorie',
            },
        ),
        migrations.CreateModel(
            name='CategoryFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='nom')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Category', verbose_name='catégorie parent')),
            ],
            options={
                'verbose_name': 'filtre de catégorie',
                'verbose_name_plural': 'filtres de catégorie',
            },
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, default=datetime.datetime.now, verbose_name="date d'émission")),
                ('last_name', models.CharField(max_length=255, verbose_name='prénom du bénéficiaire')),
                ('first_name', models.CharField(max_length=255, verbose_name='nom du bénéficiaire')),
                ('contact', models.CharField(max_length=255, verbose_name='contact du bénéficiaire')),
                ('ref', models.CharField(blank=True, max_length=255, unique=True, verbose_name='référence')),
                ('date', models.DateTimeField(verbose_name='date de réception')),
                ('shipping_code', models.CharField(max_length=255, verbose_name='code de confirmation de livraison')),
                ('payment_modality', models.SmallIntegerField(choices=[(1, 'Mobile Money'), (2, 'Cash à la livraison')], verbose_name='méthode de payement')),
                ('delivered', models.BooleanField(choices=[(False, 'EN COURS'), (True, 'ARRIVE A DESTINATION')], default=False, verbose_name='Etat')),
                ('shipping_cost', models.PositiveIntegerField(default=0, verbose_name='Coût de la livraison')),
                ('details', models.TextField(blank=True, default='', verbose_name='détails de la commande')),
                ('total_cost', models.PositiveIntegerField(default=0, verbose_name='Coût total')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Address', verbose_name='addresse de destination')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Account', verbose_name='commanditaire')),
            ],
            options={
                'verbose_name': 'commande',
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Furnisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='nom du fournisseur')),
            ],
            options={
                'verbose_name': 'fournisseur',
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, verbose_name='nom de la solde')),
                ('image', models.ImageField(upload_to='', verbose_name="changer l'image ")),
                ('total', models.PositiveIntegerField(default=0, verbose_name='coût total')),
                ('dateBegin', models.DateTimeField(verbose_name='date de début')),
                ('dateEnd', models.DateTimeField(verbose_name='date de fin')),
                ('slug', models.SlugField(blank=True, verbose_name='Lien de la promotion')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name="texte d'accroche")),
            ],
            options={
                'verbose_name': 'solde',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=255, verbose_name='mot')),
            ],
            options={
                'verbose_name': 'Mot-clé',
                'verbose_name_plural': 'Mots-clé',
            },
        ),
        migrations.CreateModel(
            name='Town',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='nom de la ville')),
            ],
            options={
                'verbose_name': 'ville',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='nom de la zone')),
                ('priority', models.PositiveIntegerField(default=0, verbose_name='priorité de la zone')),
                ('town', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Town', verbose_name='ville parente')),
            ],
            options={
                'unique_together': {('priority', 'town')},
            },
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.ManyToManyField(related_name='wish_line', to='ecommerce.Article', verbose_name="liste d'articles")),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Account', verbose_name='Propriétaire')),
            ],
        ),
        migrations.CreateModel(
            name='VerifiyEmailTokens',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('expirationDate', models.DateTimeField(verbose_name="Date d'expiration")),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': "Jeton de vérification d'email",
                'verbose_name_plural': "Jeton de vérification d'email",
            },
        ),
        migrations.CreateModel(
            name='TagLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_related', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ecommerce.Article')),
                ('tag_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Tag', verbose_name='Mot-clé')),
            ],
            options={
                'verbose_name': 'Mot-clé',
                'verbose_name_plural': 'Mots-clé',
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leading', models.CharField(max_length=255, verbose_name='texte de premier plan')),
                ('title', models.CharField(max_length=255, verbose_name='titre')),
                ('subtitle', models.CharField(max_length=255, verbose_name='sous-titre')),
                ('show', models.BooleanField(default=True, verbose_name='afficher ?')),
                ('order', models.PositiveIntegerField(default=1, unique=True, verbose_name='ordre de défilement')),
                ('image', models.ImageField(upload_to='', verbose_name="changer l'image")),
                ('bg_image', models.ImageField(blank=True, upload_to='', verbose_name="changer l'image")),
                ('article_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Article', verbose_name='article lié')),
            ],
            options={
                'verbose_name': 'slide',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ResetPasswordTokens',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('expirationDate', models.DateTimeField(verbose_name="Date d'expiration")),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Jeton de réinitialisation de mot de passe',
                'verbose_name_plural': 'Jetons de réinitialisation de mot de passe',
            },
        ),
        migrations.CreateModel(
            name='PromotionLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_count', models.PositiveIntegerField(default=0, verbose_name="nombre d'articles")),
                ('article_related', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Article', verbose_name='article lié')),
                ('promo_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Promotion', verbose_name='contenant')),
            ],
            options={
                'verbose_name': 'article',
            },
        ),
        migrations.AddField(
            model_name='promotion',
            name='articles',
            field=models.ManyToManyField(through='ecommerce.PromotionLine', to='ecommerce.Article'),
        ),
        migrations.CreateModel(
            name='PromoCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Command', verbose_name='commande liée')),
                ('promotion_related', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Promotion', verbose_name='promotion liée')),
            ],
            options={
                'verbose_name': 'solde inclue',
                'verbose_name_plural': 'soldes incluses',
            },
        ),
        migrations.CreateModel(
            name='PromoCart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Cart', verbose_name='panier lié')),
                ('promotion_related', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Promotion', verbose_name='promotion liée')),
            ],
            options={
                'verbose_name': 'solde inclue',
                'verbose_name_plural': 'soldes incluses',
            },
        ),
        migrations.CreateModel(
            name='FurnisherArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Article', verbose_name='article lié')),
                ('furnisher_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Furnisher', verbose_name='nom du fournisseur')),
            ],
            options={
                'verbose_name': 'fournisseur',
            },
        ),
        migrations.AddField(
            model_name='furnisher',
            name='zone',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Zone', verbose_name='zone située'),
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.PositiveIntegerField(default=0, verbose_name='note')),
                ('account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ecommerce.Account', verbose_name='Client concerné')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Article', verbose_name='Article')),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='nom de la commune')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Zone', verbose_name='zone située')),
            ],
        ),
        migrations.CreateModel(
            name='CommandLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_count', models.PositiveIntegerField(default=0, verbose_name="nombre d'articles")),
                ('article_related', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Article', verbose_name='article lié')),
                ('command_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Command', verbose_name='contenant')),
            ],
            options={
                'verbose_name': 'lignes de la commande',
                'verbose_name_plural': 'lignes de la commande',
            },
        ),
        migrations.AddField(
            model_name='command',
            name='promotions',
            field=models.ManyToManyField(through='ecommerce.PromoCommand', to='ecommerce.Promotion'),
        ),
        migrations.CreateModel(
            name='CategoryFilterLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Article', verbose_name='article')),
                ('category_filter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.CategoryFilter', verbose_name='catégorie')),
            ],
            options={
                'verbose_name': 'filtre de catégorie',
                'verbose_name_plural': 'filtres de catégorie',
            },
        ),
        migrations.CreateModel(
            name='CartLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_count', models.PositiveIntegerField(default=0, verbose_name="nombre d'articles")),
                ('Cart_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.Cart', verbose_name='contenant')),
                ('article_related', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Article', verbose_name='article lié')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='promotions',
            field=models.ManyToManyField(through='ecommerce.PromoCart', to='ecommerce.Promotion'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Category', verbose_name='catégorie'),
        ),
        migrations.AddField(
            model_name='article',
            name='evaluations',
            field=models.ManyToManyField(through='ecommerce.Evaluation', to='ecommerce.Account'),
        ),
        migrations.AddField(
            model_name='article',
            name='filters',
            field=models.ManyToManyField(through='ecommerce.CategoryFilterLine', to='ecommerce.CategoryFilter'),
        ),
        migrations.AddField(
            model_name='article',
            name='furnishers',
            field=models.ManyToManyField(through='ecommerce.FurnisherArticle', to='ecommerce.Furnisher', verbose_name='Fournisseurs'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(through='ecommerce.TagLine', to='ecommerce.Tag'),
        ),
        migrations.AddField(
            model_name='address',
            name='commune',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Commune', verbose_name='Commune située'),
        ),
        migrations.AddField(
            model_name='account',
            name='address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ecommerce.Address', verbose_name='addresse'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_related',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur lié'),
        ),
    ]
